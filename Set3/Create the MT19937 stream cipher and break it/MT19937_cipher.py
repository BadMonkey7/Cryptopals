# coding=utf-8
from random import randint
from MT19937 import MT19937
from time import  time
from Crypto.Util import number
import os
pre = os.urandom(randint(5,10))
mess = pre+'A'*14
mx = 1<<16
key = randint(0,mx)
# 用于加密的密钥生成（不安全）
def mt_cipher(mess,seed):
    def keystream(seed):
        prng = MT19937(seed).random_32()
        while True:
            cur = bin(next(prng))[2:]
            for i in range(4):
                yield int(cur[i*4:i*4+4],2)
    key = keystream(seed)
    cipher = ''
    for i,j in zip(mess,key):
        cipher += chr(ord(i)^j)
    return cipher


def crack_key(enc):
    for i in range(mx):
        now = mt_cipher(enc,i)
        if 'A'*14 in now:
            print 'The key is {}'.format(i)
            break
# 用于 生成token 不安全
def getToken():
    seed = int(time()) & mx
    prng = MT19937(seed).random_32()
    token = ''.join([number.long_to_bytes(next(prng),4) for _ in range(4)])
    return token

def checkToken(token):
    for i in range(mx):
        prng = MT19937(i).random_32()
        now = ''.join([number.long_to_bytes(next(prng),4) for _ in range(4)])
        if now == token:
            print 'Token is generated by MT19937!'
            print 'seed is {}'.format(i)
            break

checkToken(getToken())


